NEW ALGORITHMS
==============

- include an anomaly detection algorithm
- develop the FunkSVD: Also PLSI as probabilistic version of SVD
- ability to search through the configuration space and find the best performing algorithmic configuration


CODE IMPROVEMENT
================
- use fit/predit/transform methods instead of training, validate etc like Python?
	- DataTransformer: merge transform and normalize into a transform method, remove the trainingMode var and use a fit() instead


	- BaseMLmodel: change train(trainingData, validationData) to fit(trainingData) and a predict() method. Eliminate the test() and rename it to validate() which takes a dataset and returns its VMs

- eliminate _fit() or estimateModelParameters() and pass the save() in fit()
- Remove initializeTrainingConfiguration(), pass the parameters in train() method
- newInstance(), constructors etc of inherited from BaseTrainable could perhaps pass to BaseTrainable and reduce the extra code.
- Make this a method DATA_SAFE_CALL_BY_REFERENCE?

- Serialization improvements
- create the required exceptions
- create a proper logger for the messages
- document the code
- CSV reader and converter to Dataset
- Add MapDB maps in the Dataset


DOCUMENTATION
=============

- Documenting the code
- How-to blog post on the installation of the framework
- How-to blog post on building a Text Classification model


CHECK OUT HUGE COLLECTION LIBS, DBS AND STORAGE:
================================================

Java StoredMap + BerkeleyDB:
http://docs.oracle.com/cd/E17277_02/html/java/com/sleepycat/collections/StoredMap.html
http://www.oracle.com/technetwork/database/berkeleydb/overview/index-093405.html

Redis:
http://redis.io/

Cassandra Collections:
https://github.com/otaviojava/Easy-Cassandra/wiki

Vanilla-java - HugeCollections:
https://code.google.com/p/vanilla-java/wiki/HugeCollections

Fastutil:
http://fastutil.di.unimi.it/#install
http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22it.unimi.dsi%22

Joafip:
http://joafip.sourceforge.net/javadoc/net/sf/joafip/java/util/PHashMap.html

Hibernate:
http://docs.jboss.org/hibernate/orm/3.6/reference/en-US/html/collections.html

MapDB:
https://github.com/jankotek/MapDB/blob/master/src/test/java/examples/_HelloWorld.java

Lazy loading persistent objects
https://today.java.net/pub/a/today/2006/07/13/lazy-loading-is-easy.html
